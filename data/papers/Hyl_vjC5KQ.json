{"title": "HIERARCHICAL REINFORCEMENT LEARNING VIA ADVANTAGE-WEIGHTED INFORMATION MAXIMIZATION", "authors": "Takayuki Osa; Voot Tangkaratt; Masashi Sugiyama", "pub_date": "", "abstract": "Real-world tasks are often highly structured. Hierarchical reinforcement learning (HRL) has attracted research interest as an approach for leveraging the hierarchical structure of a given task in reinforcement learning (RL). However, identifying the hierarchical policy structure that enhances the performance of RL is not a trivial task. In this paper, we propose an HRL method that learns a latent variable of a hierarchical policy using mutual information maximization. Our approach can be interpreted as a way to learn a discrete and latent representation of the state-action space. To learn option policies that correspond to modes of the advantage function, we introduce advantage-weighted importance sampling. In our HRL method, the gating policy learns to select option policies based on an option-value function, and these option policies are optimized based on the deterministic policy gradient method. This framework is derived by leveraging the analogy between a monolithic policy in standard RL and a hierarchical policy in HRL by using a deterministic option policy. Experimental results indicate that our HRL approach can learn a diversity of options and that it can enhance the performance of RL in continuous control tasks.", "sections": [{"heading": "INTRODUCTION", "text": "Reinforcement learning (RL) has been successfully applied to a variety of tasks, including board games , robotic manipulation tasks (Levine et al., 2016), and video games (Mnih et al., 2015). Hierarchical reinforcement learning (HRL) is a type of RL that leverages the hierarchical structure of a given task by learning a hierarchical policy (Sutton et al., 1999;Dietterich, 2000). Past studies in this field have shown that HRL can solve challenging tasks in the video game domain (Vezhnevets et al., 2017;Bacon et al., 2017) and robotic manipulation (Daniel et al., 2016;Osa et al., 2018b). In HRL, lower-level policies, which are often referred to as option policies, learn different behavior/control patterns, and the upper-level policy, which is often referred to as the gating policy, learns to select option policies. Recent studies have developed HRL methods using deep learning (Goodfellow et al., 2016) and have shown that HRL can yield impressive performance for complex tasks (Bacon et al., 2017;Frans et al., 2018;Vezhnevets et al., 2017;Haarnoja et al., 2018a). However, identifying the hierarchical policy structure that yields efficient learning is not a trivial task, since the problem involves learning a sufficient variety of types of behavior to solve a given task.\nIn this study, we present an HRL method via the mutual information (MI) maximization with advantage-weighted importance, which we refer to as adInfoHRL. We formulate the problem of learning a latent variable in a hierarchical policy as one of learning discrete and interpretable repre-sentations of states and actions. Ideally, each option policy should be located at separate modes of the advantage function. To estimate the latent variable that corresponds to modes of the advantage function, we introduce advantage-weighted importance weights. Our approach can be considered to divide the state-action space based on an information maximization criterion, and it learns option policies corresponding to each region of the state-action space. We derive adInfoHRL as an HRL method based on deterministic option policies that are trained based on an extension of the deterministic policy gradient (Silver et al., 2014;Fujimoto et al., 2018). The contributions of this paper are twofold:\n1. We propose the learning of a latent variable of a hierarchical policy as a discrete and hidden representation of the state-action space. To learn option policies that correspond to the modes of the advantage function, we introduce advantage-weighted importance. 2. We propose an HRL method, where the option policies are optimized based on the deterministic policy gradient and the gating policy selects the option that maximizes the expected return. The experimental results show that our proposed method adInfoHRL can learn a diversity of options on continuous control tasks. Moreover, our approach can improve the performance of TD3 on such tasks as the Walker2d and Ant tasks in OpenAI Gym with MuJoco simulator.", "n_publication_ref": 15, "n_figure_ref": 0}, {"heading": "BACKGROUND", "text": "In this section, we formulate the problem of HRL in this paper and describe methods related to our proposal.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "HIERARCHICAL REINFORCEMENT LEARNING", "text": "We consider tasks that can be modeled as a Markov decision process (MDP), consisting of a state space S, an action space A, a reward function r : S \u00d7 A \u2192 R, an initial state distribution \u03c1(s 0 ), and a transition probability p(s t+1 |s t , a t ) that defines the probability of transitioning from state s t and action a t at time t to next state s t+1 . The return is defined as R t =\nT i=t \u03b3 i\u2212t r(s i , a i ), where \u03b3 is a discount factor, and policy \u03c0(a|s) is defined as the density of action a given state s. Let d \u03c0 (s) = T t=0 \u03b3 t p(s t = s) denote the discounted visitation frequency induced by the policy \u03c0. The goal of reinforcement learning is to learn a policy that maximizes the expected return J(\u03c0) = E s0,a0,... [R 0 ] where s 0 \u223c \u03c1(s 0 ), a \u223c \u03c0 and s t+1 \u223c p(s t+1 |s t , a t ). By defining the Q-function as Q \u03c0 (s, a) = E s0,a0,... [R t |s t = s, a t = a], the objective function of reinforcement learning can be rewritten as follows:\nJ(\u03c0) = d \u03c0 (s)\u03c0(a|s)Q \u03c0 (s, a)dads.(1)\nHerein, we consider hierarchical policy \u03c0(a|s) = o\u2208O \u03c0(o|s)\u03c0(a|s, o), where o is the latent variable and O is the set of possible values of o. Many existing HRL methods employ a policy structure of this form (Frans et al., 2018;Vezhnevets et al., 2017;Bacon et al., 2017;Florensa et al., 2017;Daniel et al., 2016). In general, latent variable o can be discrete (Frans et al., 2018;Bacon et al., 2017;Florensa et al., 2017;Daniel et al., 2016;Osa & Sugiyama, 2018) or continuous (Vezhnevets et al., 2017). \u03c0(o|s) is often referred to as a gating policy (Daniel et al., 2016;Osa & Sugiyama, 2018), policy over options (Bacon et al., 2017), or manager (Vezhnevets et al., 2017). Likewise, \u03c0(a|s, o) is often referred to as an option policy (Osa & Sugiyama, 2018), sub-policy (Daniel et al., 2016), or worker (Vezhnevets et al., 2017). In HRL, the objective function is given by\nJ(\u03c0) = d \u03c0 (s) o\u2208O \u03c0(o|s)\u03c0(a|s, o)Q \u03c0 (s, a)dads.(2)\nAs discussed in the literature on inverse RL (Ziebart, 2010), multiple policies can yield equivalent expected returns. This indicates that there exist multiple solutions to latent variable o that maximizes the expected return. To obtain the preferable solution for o, we need to impose additional constraints in HRL. Although prior work has employed regularizers (Bacon et al., 2017) and constraints (Daniel et al., 2016) to obtain various option policies, the method of learning a good latent variable o that improves sample-efficiency of the learning process remains unclear. In this study we propose the learning of the latent variable by maximizing MI between latent variables and state-action pairs.", "n_publication_ref": 21, "n_figure_ref": 0}, {"heading": "DETERMINISTIC POLICY GRADIENT", "text": "The deterministic policy gradient (DPG) algorithm was developed for learning a monolithic deterministic policy \u00b5 \u03b8 (s) : S \u2192 A by Silver et al. (2014). In off-policy RL, the objective is to maximize the expectation of the return, averaged over the state distribution induced by a behavior policy \u03b2(a|s):\nJ(\u03c0) = d \u03b2 (s)\u03c0(a|s)Q \u03c0 s, a)dads.(3)\nWhen a policy is deterministic, the objective becomes J(\u03c0) = d \u03b2 (s)Q \u03c0 s, \u00b5 \u03b8 (s) ds. Silver et al. (2014) have shown that the gradient of a deterministic policy is given by\n\u2207 \u03b8 E s\u223cd \u03b2 (s) [Q \u03c0 (s, a)] = E s\u223cd \u03b2 (s) \u2207 \u03b8 \u00b5 \u03b8 (s)\u2207 a Q \u03c0 s, a | a=\u00b5 \u03b8 (s) .(4)\nThe DPG algorithm has been extended to the deep deterministic policy gradient (DDPG) for continuous control problems that require neural network policies . Twin Delayed Deep Deterministic policy gradient algorithm (TD3) proposed by Fujimoto et al. (2018) is a variant of DDPG that outperforms the state-of-the-art on-policy methods such as TRPO (Schulman et al., 2017a) and PPO (Schulman et al., 2017b) in certain domains. We extend this deterministic policy gradient to learn a hierarchical policy.", "n_publication_ref": 5, "n_figure_ref": 0}, {"heading": "REPRESENTATION LEARNING VIA INFORMATION MAXIMIZATION", "text": "Recent studies such as those by ; Hu et al. (2017); Li et al. (2017) have shown that an interpretable representation can be learned by maximizing MI. Given a dataset X = (x 1 , ..., x n ), regularized information maximization (RIM) proposed by Gomes et al. (2010) involves learning a conditional modelp(y|x; \u03b7) with parameter vector \u03b7 that predicts a label y. The objective of RIM is to minimize\n(\u03b7) \u2212 \u03bbI \u03b7 (x, y),(5)\nwhere (\u03b7) is the regularization term, I \u03b7 (x, y) is MI, and \u03bb is a coefficient. MI can be decomposed as I \u03b7 (x, y) = H(y) \u2212 H(y|x) where H(y) is entropy and H(y|x) the conditional entropy. Increasing H(y) conduces the label to be uniformly distributed, and decreasing H(y|x) conduces to clear cluster assignments. Although RIM was originally developed for unsupervised clustering problems, the concept is applicable to various problems that require learning a hidden discrete representation.\nIn this study, we formulate the problem of learning the latent variable o of a hierarchical policy as one of learning a latent representation of the state-action space.", "n_publication_ref": 3, "n_figure_ref": 0}, {"heading": "LEARNING OPTIONS VIA ADVANTAGE-WEIGHTED INFORMATION MAXIMIZATION", "text": "In this section, we propose a novel HRL method based on advantage-weighted information maximization. We first introduce the latent representation learning via advantage-weighted information maximization, and we then describe the HRL framework based on deterministic option policies.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "LATENT REPRESENTATION LEARNING VIA ADVANTAGE-WEIGHTED INFORMATION MAXIMIZATION", "text": "Although prior work has often considered H(o|s) or I(s, o), which results in a division of the state space, we are interested in using I (s, a), o for dividing the state-action space instead. A schematic sketch of our approach is shown in Figure 1. As shown in the left side of Figure 1, the advantage function often has multiple modes. Ideally, each option policies should correspond to separate modes of the advantage function. However, it is non-trivial to find the modes of the advantage function in practice. For this purpose, we reduce the problem of finding modes of the advantage function to that of finding the modes of the probability density of state action pairs.\nWe consider a policy based on the advantage function of the form  where\n\u03c0 Ad (a|s) = f A \u03c0 (s, a) Z ,(6)\nA \u03c0 (s, a) = Q \u03c0 (s, a) \u2212 V \u03c0 (s) is the advantage function, V \u03c0 (s)\nis the state value function, and Z is the partition function. f (\u2022) is a functional, which is a function of a function. f (\u2022) is a monotonically increasing function with respect to the input variable and always satisfies f (\u2022) > 0.\nIn our implementation we used the exponential function f (\u2022) = exp(\u2022). When following such a policy, an action with the larger advantage is drawn with a higher probability. Under this assumption, finding the modes of the advantage function is equivalent to finding modes of the density induced by \u03c0 Ad . Thus, finding the modes of the advantage function can be reduced to the problem of clustering samples induced by \u03c0 Ad .\nFollowing the formulation of RIM introduced in Section 2.3, we formulate the problem of clustering samples induced by \u03c0 Ad as the learning of discrete representations via MI maximization. For this purpose, we consider a neural network that estimates p(o|s, a; \u03b7) parameterized with vector \u03b7, which we refer to as the option network. We formulate the learning of the latent variable o as minimizing L option (\u03b7) = (\u03b7) \u2212 \u03bbI o, (s, a); \u03b7 ,\nwhere I(o, (s, a)) =\u0124(o|s, a; \u03b7) \u2212\u0124(o; \u03b7), and (\u03b7) is the regularization term. In practice, we need to approximate the advantage function, and we learn the discrete variable o that corresponds to the modes of the current estimate of the advantage function. For regularization, we used a simplified version of virtual adversarial training (VAT) proposed by Miyato et al. (2016). Namely, we set (\u03b7) = D KL p(o|s noise , a noise ; \u03b7)||p(o|s, a; \u03b7) where s noise = s + s , a noise = a + a , s and a denote white noise. This regularization term penalizes dissimilarity between an original state-action pair and a perturbed one, and Hu et al. (2017) \nThus, the probability density of (s, a) induced by \u03c0 Ad is necessary for computing MI for our purpose. To estimate the probability density of (s, a) induced by \u03c0 Ad , we introduce the advantageweighted importance in the next section.", "n_publication_ref": 2, "n_figure_ref": 2}, {"heading": "IMPORTANCE WEIGHTS FOR MUTUAL INFORMATION ESTIMATION", "text": "Although we show that the problem of finding the modes of the advantage function can be reduced to MI maximization with respect to the samples induced by \u03c0 Ad , samples induced by \u03c0 Ad are not available in practice. While those induced during the learning process are available, a discrete representation obtained from such samples does not correspond to the modes of the advantage function.\nTo estimate the density induced by \u03c0 Ad , we employ an importance sampling approach.\nWe assume that the change of the state distribution induced by the policy update is sufficiently small, namely, d \u03c0Ad (s) \u2248 d \u03b2 (s). Then, the importance weight can be approximated as\nW (s, a) = p \u03c0Ad (s, a) p \u03b2 (s, a) = d \u03c0Ad (s)\u03c0 Ad (a|s) d \u03b2 (s)\u03b2(a|s) \u2248 \u03c0 Ad (a|s) \u03b2(a|s) = f (A(s, a)) Z\u03b2(a|s) . (10\n)\nand the normalized importance weight is given g\u1ef9\nW (s, a) = W (s, a) N j=1 W (s j , a j ) = f (A(s,a)) Z\u03b2(a|s) N j=1 f (A(sj ,aj )) Z\u03b2(aj |sj ) = f (A(s,a)) \u03b2(a|s) N j=1 f (A(sj ,aj )) \u03b2(aj |sj ) . (11\n)\nAs the partition function Z is canceled, we do not need to compute Z when computing the importance weight in practice. We call this importance weight W the advantage-weighted importance and employ it to compute the objective function used to estimate the latent variable.\nThis advantage-weighted importance is used to compute the entropy terms for computing MI in Equation ( 7). The empirical estimate of the entropy H(o) is given b\u0177\nH(o; \u03b7) = \u2212 o\u2208Op (o; \u03b7) logp(o; \u03b7), wherep(o; \u03b7) = 1 N N i=1 W (s i , a i )p(o|s i , a i ; \u03b7). (12\n)\nwhere the samples (s i , a i ) are drawn from p \u03b2 (s, a) induced by a behavior policy \u03b2(a|s). Likewise, the empirical estimate of the conditional entropy H(o|s, a) is given b\u0177\nH(o|s, a; \u03b7) = 1 N N i W (s i , a i )p(o|s i , a i ; \u03b7) log p(o|s i , a i ; \u03b7).(13)\nThe derivations of Equations ( 12) and ( 13) are provided in Appendix A. To train the option network, we store the samples collected by the M most recent behavior policies, to which we refer as onpolicy buffer D on . Although the algorithm works with entire samples stored in the replay buffer, we observe that the use of the on-policy buffer for latent representation learning exhibits better performance. For this reason, we decided to use the on-policy buffer in our implementation. Therefore, while the algorithm is off-policy in the sense that the option is learned from samples collected by behavior policies, our implementation is \"semi\"on-policy in the sense that we use samples collected by the most recent behavior policies.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "HRL OBJECTIVE WITH DETERMINISTIC OPTION POLICIES", "text": "Instead of stochastic option policies, we consider deterministic option policies and model them using separate neural networks. We denote by \u03c0(a|s, o) = \u00b5 o \u03b8 (s) deterministic option policies parameterized by vector \u03b8. The objective function of off-policy HRL with deterministic option policies can then be obtained by replacing \u03c0(a|s) with o\u2208O \u03c0(o|s)\u03c0(a|s, o) in Equation (3):\nJ(w, \u03b8) = d \u03b2 (s) o\u2208O \u03c0(o|s)Q \u03c0 s, \u00b5 o \u03b8 (s); w ds, (14\n)\nwhere Q \u03c0 (s, a; w) is an approximated Q-function parameterized using vector w. This form of the objective function is analogous to Equation (3). Thus, we can extend standard RL techniques to the learning of the gating policy \u03c0(o|s) in HRL with deterministic option policies.\nIn HRL, the goal of the gating policy is to generate a value of o that maximizes the conditional expectation of the return:\nQ \u03c0 \u2126 (s, o) = E [R|s t = s, o t = o] = \u03c0(a|s, o)Q \u03c0 (s, a)da,(15)\nwhich is often referred to as the option-value function (Sutton et al., 1999). When option policies are stochastic, it is often necessary to approximate the option-value function Q \u03c0 \u2126 (s, o) in addition to the action-value function Q \u03c0 (s, a). However, in our case, the option-value function for deterministic option policies is given by\nQ \u03c0 \u2126 (s, o) = Q \u03c0 (s, \u00b5 o \u03b8 (s)),(16)\nAlgorithm 1 HRL via Advantage-Weighted Information Maximization (adInfoHRL)\nInput: Number of options O, size of on-policy buffer Initialize: Replay buffer D R , on-policy buffer D on , network parameters \u03b7, \u03b8, w, \u03b8 target , w target repeat for t = 0 to t = T do Draw an option for a given s by following Equation 17: o \u223c \u03c0(o|s) Draw an action a \u223c \u03b2(a|s, o) = \u00b5 o \u03b8 (s) + Record a data sample (s, a, r, s ) Aggregate the data in D R and D on if the on-policy buffer is full then Update the option network by minimizing Equation ( 7) for samples in D on Clear the on-policy buffer D on end if Sample a batch D batch \u2208 D R Update the Q network parameter w if t mod d then Estimate p(o|s i , a i ) for (s i , a i ) \u2208 D batch using the option network Assign samples (s i , a i ) \u2208 D batch to the option o * = arg max p(o|s i , a i ) Update the option policy networks \u00b5 o \u03b8 (s) for o = 1, ..., O with Equation ( 19) Update the target networks:\nw target \u2190 \u03c4 w +(1\u2212\u03c4 )w target , \u03b8 target \u2190 \u03c4 \u03b8 +(1\u2212\u03c4 )\u03b8 target end if end for until the convergence return \u03b8\nwhich we can estimate using the deterministic option policy \u00b5 o \u03b8 (s) and the approximated actionvalue function Q \u03c0 (s, a; w). In this work we employ the softmax gating policy of the form\n\u03c0(o|s) = exp Q \u03c0 (s, \u00b5 o \u03b8 (s); w) o\u2208O exp Q \u03c0 s, \u00b5 o \u03b8 (s); w ,(17)\nwhich encodes the exploration in its form (Daniel et al., 2016). The state value function is given as\nV \u03c0 (s) = o\u2208O \u03c0(o|s)Q \u03c0 (s, \u00b5 o \u03b8 (s); w),(18)\nwhich can be computed using Equation (17). We use this state-value function when computing the advantage-weighted importance as A(s, a) = Q(s, a) \u2212 V (s). In this study, the Q-function is trained in a manner proposed by Fujimoto et al. (2018). Two neural networks (Q \u03c0 w1 , Q \u03c0 w2 ) are trained to estimate the Q-function, and the target value of the Q-function is computed as y i = r i + \u03b3 min 1,2 Q(s i , a i ) for sample (s i , a i , a i , r i ) in a batch sampled from a replay buffer, where r i = r(s i , a i ). In this study, the gating policy determines the option once every N time steps, i.e., t = 0, N, 2N, . . .", "n_publication_ref": 3, "n_figure_ref": 0}, {"heading": "Neural networks that model \u00b5 o", "text": "\u03b8 (a|s) for o = 1, ..., O, which we refer to as option-policy networks, are trained separately for each option. In the learning phase, p(o|s, a) is estimated by the option network. Then, samples are assigned to option o * = arg max o p(o|s, a; \u03b7) and are used to update the option-policy network that corresponds to o * . When performing a rollout, o is drawn by following the gating policy in Equation ( 17), and an action is generated by the selected option-policy network.\nDifferentiating the objective function in Equation ( 14), we obtain the deterministic policy gradient of our option-policy \u00b5 o \u03b8 (s) given by\n\u2207 \u03b8 J(w, \u03b8) = E s\u223cd \u03b2 (s)\u03c0(o|s) \u2207 \u03b8 \u00b5 o \u03b8 (s)\u2207 a Q \u03c0 s, a | a=\u00b5 o \u03b8 (s) . (19\n)\nThe procedure of adInfoHRL is summarized by Algorithm 1. As in TD3 (Fujimoto et al., 2018), we employed the soft update using a target value network and a target policy network. ", "n_publication_ref": 1, "n_figure_ref": 0}, {"heading": "EXPERIMENTS", "text": "We evaluated the proposed algorithm adInfoHRL on the OpenAI Gym platform (Brockman et al., 2016) with the MuJoCo Physics simulator (Todorov et al., 2012). We compared its performance with that of PPO implemented in OpenAI baselines (Dhariwal et al., 2017) and TD3. Henderson et al. (2018) have recently claimed that algorithm performance varies across environment, there is thus no clearly best method for all benchmark environments, and off-policy and on-policy methods have advantages in different problem domains. To analyze the performance of adInfoHRL, we compared it with state-of-the-art algorithms for both on-policy and off-policy methods, although we focused on the comparison with TD3, as our implementation of adInfoHRL is based on it. To determine the effect of learning the latent variable via information maximization, we used the same network architectures for the actor and critic in adInfoHRL and TD3. In addition, to evaluate the benefit of the advantage-weighted importance, we evaluated a variant of adInfoHRL, which does not use the advantage-weighted importance for computing mutual information.We refer to this variant of adInfoHRL as infoHRL. The gating policy updated variable o once every three time steps. We tested the performance of adInfoHRL with two and four options. The averaged return of five trials is reported in Figure 3(a)-(d). AdIfoHRL yields the best performance on Ant 1 and Walker2d, whereas the performance of TD3 and adInfoHRL was comparable on HalfCheetah and Hopper, and PPO outperformed the other methods on Hopper. Henderson et al. (2018) claimed that on-policy methods show their superiority on tasks with unstable dynamics, and our experimental results are in line with such previous studies. AdinfoHRL outperformed infoHRL, which isthe variant of adInfoHRL without the advantage-weighted importance on all the tasks. This result shows that the adavatage-weighted importance enhanced the performance of learning options.\nAdInfoHRL exhibited the sample efficiency on Ant and Walker2d in the sense that it required fewer samples than TD3 to achieve comparable performance on those tasks. The concept underlying ad-InfoHRL is to divide the state-action space to deal with the multi-modal advantage function and learn option policies corresponding to separate modes of the advantage function. Therefore, adIn-foHRL shows its superiority on tasks with the multi-modal advantage function and not on tasks with a simple advantage function. Thus, it is natural that the benefit of adInfoHRL is dependent on the characteristics of the task.   ", "n_publication_ref": 5, "n_figure_ref": 1}, {"heading": "RELATED WORK AND DISCUSSION", "text": "Past studies have proposed several ways to deal with the latent variable in HRL. The recent work by Smith et al. (2018) proposed inferred option policy gradients (IOPG), which is derived as an extension of policy gradient to the option framework. Nachum et al. (2018) recently proposed off-policy target correction for HRL on goal-oriented tasks, where a higher-level policy instructs a lower-level policy by generating the goal signal instead of an inferred latent variable. A popular approach for learning the latent variable in HRL is the variational approach. The recent work by Haarnoja et al. (2018a) is based on soft actor critic (Haarnoja et al., 2018b), and the latent variable is inferred using the variational approach. The work by Hausman et al. (2018) is also closely related to the variational approach, and they proposed a method for learning a latent variable of a hierarchical policy via a variational bound. On the contrary, our method learns the latent variable by maximizing MI with advantage-weighted importance. Recent studies by Gregor et al. (2016); Florensa et al. (2017); Eysenbach et al. (2018) also considered the MI in their formulation. In these methods, MI between the state and the latent variable is considered so as to obtain diverse behaviors. Our approach is different from the previous studies in the sense that we employ MI between the latent variable and the state-action pairs, which leads to the division of the state-action space instead of considering only the state space. We think that dividing the state-action space is an efficient approach when the advantage function is multi-modal, as depicted in Figure 1. InfoGAIL proposed by Li et al. (2017) learns the interpretable representation of the state-action space via MI maximization. InfoGAIL can be interpreted as a method that divides the state-action space based on the density induced by an expert's policy by maximizing the regularized MI objective. In this sense, it is closely related to our method, although their problem setting is imitation learning (Osa et al., 2018a), which is different from our HRL problem setting.\nThe use of the importance weight based on the value function has appeared in previous studies (Dayan & Hinton, 1997;Kober & Peters, 2011;Neumann & Peters, 2009;Osa & Sugiyama, 2018). For example, the method proposed by Neumann & Peters (2009) employs the importance weight based on the advantage function for learning a monolithic policy, while our method uses a similar importance weight for learning a latent variable of a hierarchical policy. Although Osa & Sugiyama (2018) proposed to learn a latent variable in HRL with importance sampling, their method is limited to episodic settings where only a single option is used in an episode.\nOur method can be interpreted as an approach that divides the state-action space based on the MI criterion. This concept is related to that of Divide and Conquer (DnC) proposed by Ghosh et al. (2018), although DnC clusters the initial states and does not consider switching between option policies during the execution of a single trajectory.\nIn this study we developed adInfoHRL based on deterministic option policies. However, the concept of dividing the state-action space via advantage-weighted importance can be applied to stochastic policy gradients as well. Further investigation in this direction is necessary in future work.", "n_publication_ref": 17, "n_figure_ref": 1}, {"heading": "CONCLUSIONS", "text": "We proposed a novel HRL method, hierarchical reinforcement learning via advantage-weighted information maximization. In our framework, the latent variable of a hierarchical policy is learned as a discrete latent representation of the state-action space. Our HRL framework is derived by considering deterministic option policies and by leveraging the analogy between the gating policy for HRL and a monolithic policy for the standard RL. The results of the experiments indicate that adInfoHRL can learn diverse options on continuous control tasks. Our results also suggested that our approach can improve the performance of TD3 in certain problem domains.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "A MUTUAL INFORMATION WITH ADVANTAGE-WEIGHTED IMPORTANCE", "text": "The \nwhere W (s, a) = p \u03c0 (s,a) p \u03b2 (s,a) is the importance weight. Therefore, the empirical estimate of p(o) with respect to the density induced by a policy \u03c0 is given b\u0177 \np(o) = 1 N N i=1W (s i , a i )p(o|s i , a i ; \u03b7),(23)\nTherefore, the empirical estimate of the conditional entropy with respect to the density induced by a policy \u03c0 is given b\u0177\nH(o|s, a) = 1 N N i=1 W (s i , a i )p(o|s i , a i ; \u03b7) log p(o|s i , a i ; \u03b7).(27)\nThus, the empirical estimates of MI can be computed by Equations ( 21), ( 23) and ( 27).", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "B DERIVATION OF THE STATE-VALUE FUNCTION", "text": "In HRL, the value function is given by V (s) =  ", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "C EXPERIMENTAL DETAILS", "text": "We performed evaluations using benchmark tasks in the OpenAI Gym platform (Brockman et al., 2016) with Mujoco physics simulator (Todorov et al., 2012). Hyperparameters of reinforcement learning methods used in the experiment are shown in Tables 1-3. For exploration, both adInfoHRL and TD3 used the clipped noise drawn from the normal distribution as \u223c clip N (0, \u03c3), \u2212c, c , where \u03c3 = 0.2 and c = 0.5. For hyperparameters of PPO, we used the default values in OpenAI baselines (Dhariwal et al., 2017). For the Walker2d, HalfCheetah, and Hopper tasks, we used the Walker2d-v1, HalfCHeetah-v1, and Hopper-v1 in the OpenAI Gym, respectively. For the Ant task, we used the AntEnv implemented in the rllab . When training a policy with AdInfoHRL, infoHRL, and TD3, critics are trained once per time step, and actors are trained once every after two updates of the critics. The source code is available at https://github.com/ TakaOsa/adInfoHRL.\nWe performed the experiments five times with different seeds, and reported the averaged test return where the test return was computed once every 5000 time steps by executing 10 episodes without exploration. When performing the learned policy without exploration, the option was drawn as\no = max o Q \u03c0 (s, \u00b5 o (s)),(30)\ninstead of following the stochastic gating policy in Equations (17).   The dimensionality is reduced by t-SNE for visualization.", "n_publication_ref": 3, "n_figure_ref": 0}, {"heading": "D ADDITIONAL INFORMATION ON EXPERIMENTAL RESULTS", "text": "On the HalfCheetah task, adInfoHRL delivered the best performance with two options. The distribution of options on HalfCheetah0v1 after one million steps is shown in Figure 4. Although the state-action space is evenly divided, the options are not evenly activated. This behavior can occur because the state-action space is divided based on the density induced by the behavior policy while the activation of options is determined based on the quality of the option policies in a given state. Moreover, an even division in the action-state space is not necessarily the even division in the state space.\nThe activation of the options over time is shown in Figure 5. It is clear that one of the option corresponds to the stable running phase and the other corresponds to the phase for recovering from unstable states. Figure 6: Distribution of options on Ant-rllab task using adInfoHRL with four options. The dimensionality is reduced by t-SNE for visualization.\nFigure 7: Activation of the options over time steps on Ant-rllab task. Four options are learned.\nThe distribution of four options on the Ant-rllab task after one million steps is shown in Figure 6. Four options are activated in the different domains of the state space. The activation of the options over time on the Ant-rllab task is shown in Figure 7. While four options are actively used in the beginning of the episode, two (blue and yellow) options are mainly activated during the stable locomotion.\nSince the Ant task implemented in rllab is known to be harder than the Ant-v1 implemented in the OpenAI gym, we reported the result of the Ant task in rllab in the main manuscript. Here, we report the result of the Ant-v1 task implemented in the OpenAI gym. On the Ant-v1 task, adInfoHRL yielded the best performance with two options. The performance of adInfoHRL with two options is comparable to that of TD3 on Ant-v1. This result indicates that the Ant-v1 task does not require a hierarchical policy structure, while a hierarchical policy improves the performance of learning on Ant-rllab. The distribution of options on Ant-v1 task after one million steps is shown in Figure 8. The activation of the options over time is shown in Figure 9. It is evident that two option policies on the Ant-v1 task corresponded to different postures of the agent.\nA recent study on HRL by Smith et al. (2018) reported the performance of IOPG on Walker2d-v1, Hopper-v1, and HalfCheetah-v1. The study by Haarnoja et al. (2018a) reported the performance of SAC-LSP on Walker2d-v1, Hopper-v1, HalfCheetah-v1, and Ant-rllab. A comparison of performance between our method, IOPG, and SAC-LSP is summarized in Table 4. We report the performance after 1 million steps. It is worth noting that adInfoHRL outperformed IOPG on these tasks in terms of the achieved return, although we are aware that the qualitative performance is also important in HRL. AdInfoHRL outperformed SAC-LSP on Walker2d-v1 and Ant-rllab, and SAC-LSP shows its superiority on HalfCheetah-v1 and Hopper-v1. However, the results of SAC-LSP were obtained by using reward scaling, which was not used in the evaluation of adInfoHRL. Therefore, further experiments are necessary for fair comparison under the same condition.", "n_publication_ref": 2, "n_figure_ref": 8}, {"heading": "ACKNOWLEDGMENTS", "text": "MS was partially supported by KAKENHI 17H00757.", "n_publication_ref": 0, "n_figure_ref": 0}], "references": [{"title": "The option-critic architecture", "journal": "", "year": "2017", "authors": "P L Bacon; J Harb; D Precup"}, {"title": "Openai gym. In arXiv", "journal": "", "year": "2016", "authors": "G Brockman; V Cheung; L Pettersson; J Schneider; J Schulman; J Tang; W Zaremba"}, {"title": "InfoGAN: Interpretable representation learning by information maximizing generative adversarial nets", "journal": "", "year": "2016", "authors": "X Chen; Y Duan; R Houthooft; J Schulman; I Sutskever; P Abbeel"}, {"title": "Hierarchical relative entropy policy search", "journal": "Journal of Machine Learning Research", "year": "2016", "authors": "C Daniel; G Neumann; O Kroemer; J Peters"}, {"title": "Using expectation-maximization for reinforcement learning", "journal": "Neural Computation", "year": "1997", "authors": "P Dayan; G Hinton"}, {"title": "Openai baselines", "journal": "", "year": "2017", "authors": "P Dhariwal; C Hesse; O Klimov; A Nichol; M Plappert; A Radford; J Schulman; S Sidor; Y Wu"}, {"title": "Hierarchical reinforcement learning with the MAXQ value function decomposition", "journal": "Journal of Artificial Intelligence Research", "year": "2000", "authors": "T Dietterich"}, {"title": "Benchmarking deep reinforcement learning for continuous control", "journal": "", "year": "2016", "authors": "Y Duan; X Chen; R Houthooft; J Schulman; P Abbeel"}, {"title": "Diversity is all you need: Learning diverse skills without a reward function. arXiv", "journal": "", "year": "2018", "authors": "B Eysenbach; A Gupta; J Ibarz; Sergey Levine"}, {"title": "Stochastic neural networks for hierarchical reinforcement learning", "journal": "", "year": "2017", "authors": "C Florensa; Y Duan; P Abbeel"}, {"title": "Meta learning shared hierarchies", "journal": "", "year": "2018", "authors": "K Frans; J Ho; X Chen; P Abbeel; J Schulman"}, {"title": "Addressing function approximation error in actorcritic methods", "journal": "", "year": "2018-07", "authors": "S Fujimoto; H Van Hoof; D Meger"}, {"title": "Divide-and-conquer reinforcement learning", "journal": "", "year": "2018", "authors": "D Ghosh; A Singh; A Rajeswaran; V Kumar; S Levine"}, {"title": "Discriminative clustering by regularized information maximization", "journal": "", "year": "2010", "authors": "R Gomes; A Krause; P Perona"}, {"title": "Deep Learning", "journal": "MIT Press", "year": "2016", "authors": "I Goodfellow; Y Bengio; A Courville"}, {"title": "", "journal": "Variational intrinsic control. arXiv", "year": "2016", "authors": "K Gregor; D Rezende; D Wierstra"}, {"title": "Latent space policies for hierarchical reinforcement learning", "journal": "", "year": "2018", "authors": "T Haarnoja; K Hartikainen; P Abbeel; S Levine"}, {"title": "Soft actor-critic: Off-policy maximum entropy deep reinforcement learning with a stochastic actor", "journal": "", "year": "2018", "authors": "T Haarnoja; A Zhou; P Abbeel; S Levine"}, {"title": "Learning an embedding space for transferable robot skills", "journal": "", "year": "2018", "authors": "K Hausman; J T Springenberg; Z Wang; N Heess; M Riedmiller"}, {"title": "Deep reinforcement learning that matters", "journal": "", "year": "2018", "authors": "P Henderson; R Islam; P Bachman; J Pineau; D Precup; D Meger"}, {"title": "Learning discrete representations via information maximizing self augmented training", "journal": "", "year": "2017", "authors": "W Hu; T Miyato; S Tokui; E Matsumoto; M Sugiyama"}, {"title": "Policy search for motor primitives in robotics", "journal": "", "year": "2011", "authors": "J Kober; J Peters"}, {"title": "End-to-end training of deep visuomotor policies", "journal": "Journal of Machine Learning Research", "year": "2016", "authors": "S Levine; C Finn; T Darrell; P Abbeel"}, {"title": "InfoGAIL: Interpretable imitation learning from visual demonstrations", "journal": "", "year": "2017", "authors": "Y Li; J Song; S Ermon"}, {"title": "Continuous control with deep reinforcement learning", "journal": "", "year": "2016", "authors": "T P Lillicrap; J J Hunt; A Pritzel; N Heess; T Erez; Y Tassa; D Silver; D Wierstra"}, {"title": "Distributional smoothing with virtual adversarial training", "journal": "", "year": "2016", "authors": "T Miyato; S Maeda; M Koyama; K Nakae; S Ishii"}, {"title": "Human-level control through deep reinforcement learning", "journal": "Nature", "year": "2015", "authors": "V Mnih; K Kavukcuoglu1; D Silver; A A Rusu; J Veness; M G Bellemare; A Graves; M Riedmiller; A K Fidjeland; G Ostrovski; S Petersen; C Beattie; A Sadik; I Antonoglou; H King; D Kumaran; D Wierstra; S Legg; D Hassabis"}, {"title": "Data-efficient hierarchical reinforcement learning. arXiv", "journal": "", "year": "2018", "authors": "O Nachum; S Gu; H Lee; S Levine"}, {"title": "Fitted q-iteration by advantage weighted regression", "journal": "", "year": "2009", "authors": "G Neumann; J Peters"}, {"title": "Hierarchical policy search via return-weighted density estimation", "journal": "", "year": "2018", "authors": "T Osa; M Sugiyama"}, {"title": "An algorithmic perspective on imitation learning", "journal": "Foundations and Trends in Robotics", "year": "2018", "authors": "T Osa; J Pajarinen; G Neumann; J A Bagnell; P Abbeel; J Peters"}, {"title": "Hierarchical reinforcement learning of multiple grasping strategies with human instructions", "journal": "Advanced Robotics", "year": "2018", "authors": "T Osa; J Peters; G Neumann"}, {"title": "Equivalence between policy gradients and soft q-learning", "journal": "", "year": "2017", "authors": "J Schulman; X Chen; P Abbeel"}, {"title": "Proximal policy optimization algorithms. arXiv", "journal": "", "year": "2017", "authors": "J Schulman; F Wolski; P Dhariwal; A Radford; O Klimov"}, {"title": "Deterministic policy gradient algorithms", "journal": "", "year": "2014", "authors": "D Silver; G Lever; N Heess; T Degris; D Wierstra; M Riedmiller"}, {"title": "Mastering the game of go with deep neural networks and tree search", "journal": "Nature", "year": "2016", "authors": "D Silver; A Huang; C Maddison; A Guez; L Sifre; G Van Den Driessche; J Schrittwieser; I Antonoglou; V Panneershelvam; M Lanctot; S Dieleman; D Grewe; J Nham; N Kalchbrenner; I Sutskever; T Lillicrap; M Leach; K Kavukcuoglu; T Graepel; D Hassabis"}, {"title": "An inference-based policy gradient method for learning options", "journal": "", "year": "2018", "authors": "M J A Smith; H Van Hoof; J Pineau"}, {"title": "Between MDPs and semi-MDPs: A framework for temporal abstraction in reinforcement learning", "journal": "Artificial intelligence", "year": "1999", "authors": "R Sutton; D Precup; S Singh"}, {"title": "Mujoco: A physics engine for model-based control", "journal": "", "year": "2012", "authors": "E Todorov; T Erez; Yuval Tassa"}, {"title": "Visualizing data using t-sne", "journal": "Journal of Machine Learning Research", "year": "2008", "authors": "L Van Der Maaten; G Hinton"}, {"title": "FeUdal networks for hierarchical reinforcement learning", "journal": "", "year": "2017", "authors": "A S Vezhnevets; S Osindero; T Schaul; N Heess; M Jaderberg; D Silver; K Kavukcuoglu"}, {"title": "Modeling Purposeful Adaptive Behavior with the Principle of Maximum Causal Entropy", "journal": "", "year": "2010", "authors": "B Ziebart"}], "figures": [{"figure_label": "1", "figure_type": "", "figure_id": "fig_1", "figure_caption": "Figure 1 :1Figure1: Schematic sketch of our HRL approach. By using the advantage-weighted importance, the problem of finding the modes of the advantage-function can be reduced to that of finding the modes of the density of state action pairs.", "figure_data": ""}, {"figure_label": "", "figure_type": "", "figure_id": "fig_2", "figure_caption": "empirically show that this regularization improves the performance of learning latent discrete representations. When computing MI, we need to compute p(o) and H(o|s, a) given by p(o) = p \u03c0Ad (s, a)p(o|s, a; \u03b7)dads = E (s,a)\u223cp \u03c0 Ad (s,a) [p(o|s, a; \u03b7)] (8) H(o|s, a) = E (s,a)\u223cp \u03c0 Ad (s,a) [p(o|s, a; \u03b7) log p(o|s, a; \u03b7)] .", "figure_data": ""}, {"figure_label": "2", "figure_type": "", "figure_id": "fig_3", "figure_caption": "Figure 2 :2Figure 2: Activation of the four options over time steps on the Walker2d task.", "figure_data": ""}, {"figure_label": "", "figure_type": "", "figure_id": "fig_4", "figure_caption": "The activation of options over time and snapshots of the learned option policies on the Walker2d task are shown in Figure2, which visualizes the result from adInfoHRL with four options. One can see that the option policies are activated in different phases of locomotion. While the option indicated by yellow in Figure2corresponds to the phase for kicking the floor, the option indicated by blue corresponds to the phase when the agent was on the fly. Visualization of the options learned on the HalfCheetah and Ant tasks are shown in Appendix D.", "figure_data": ""}, {"figure_label": "", "figure_type": "", "figure_id": "fig_5", "figure_caption": "Output of the option network in the state-action space on Walker2d. Activation of options in the state space on Walker2d.", "figure_data": ""}, {"figure_label": "3", "figure_type": "", "figure_id": "fig_6", "figure_caption": "Figure 3 :3Figure 3: Performance of adInfoHRL. (a)-(d) show comparison with baseline methods. (e) and (f) show the output of the option network and the activation of options on Walker2d, respectively.", "figure_data": ""}, {"figure_label": "", "figure_type": "", "figure_id": "fig_7", "figure_caption": "mutual information (MI) between the latent variable o and the state action pair (s, a) is defined as I (s, a), o = H(o) \u2212 H(o|s, a) (20) where H(o) = p(o) log p(o)do and H(o|s, a) = p(o|s, a) log p(o|s, a)do. We make the empirical estimate of MI employed by Gomes et al. (2010); Hu et al. (2017) and modify it to employ the importance weight. The empirical estimate of MI with respect to the density induced by a policy \u03c0 is given by\u00ce (s, a; o) = o\u2208Op (o) logp(o) \u2212\u0124(o|s, a). (21) We consider the case where we have samples collected by a behavior policy \u03b2(s|a) and need to estimate MI with respect to the density induced by policy \u03c0. Given a model p(o|s, a; \u03b7) parameterized by vector \u03b7, p(o) can be rewritten as p(o) = p \u03b2 (s, a) p \u03c0 (s, a) p \u03b2 (s, a) p(o|s, a; \u03b7)dads = E [W (s, a)p(o|s, a; \u03b7)] ,", "figure_data": ""}, {"figure_label": "", "figure_type": "", "figure_id": "fig_8", "figure_caption": "whereW (s, a) =W (s,a) N j=1W (sj ,aj ) is the normalized importance weight. Likewise, the conditional entropy with respect to the density induced by a policy \u03c0 is given by H(o|s, a) = p \u03c0 (s, a)p(o|s, a; \u03b7) log p(o|s, a; \u03b7)dsda (24) = p \u03b2 (s, a) p \u03c0 (s, a) p \u03b2 (s, a) p(o|s, a; \u03b7) log p(o|s, a; \u03b7)dsda (25) = E [W (s, a)p(o|s, a; \u03b7) log p(o|s, a; \u03b7)] .", "figure_data": ""}, {"figure_label": "", "figure_type": "", "figure_id": "fig_9", "figure_caption": "o\u2208O \u03c0(o|s)\u03c0(a|s, o)Q \u03c0 (s, a)da = o\u2208O \u03c0(o|s) \u03c0(a|s, o)Q \u03c0 (s, a)da (28) Since option policies are deterministic given by \u00b5 o \u03b8 (s), the state-value function is given by V (s) = o\u2208O \u03c0(o|s)Q \u03c0 (s, \u00b5 o \u03b8 (s))da. (29)", "figure_data": ""}, {"figure_label": "", "figure_type": "", "figure_id": "fig_10", "figure_caption": "Activation of options in the state space on HalfCheetah-v1.", "figure_data": ""}, {"figure_label": "4", "figure_type": "", "figure_id": "fig_11", "figure_caption": "Figure 4 :4Figure 4: Distribution of options on the HalfCheetah-v1 task using adInfoHRL with two options. The dimensionality is reduced by t-SNE for visualization.", "figure_data": ""}, {"figure_label": "5", "figure_type": "", "figure_id": "fig_12", "figure_caption": "Figure 5 :5Figure 5: Activation of options over time steps on the HalfCheetah-v1 task using adInfoHRL with two options.", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_0", "figure_caption": "The outputs of the option network and the activation of options on Walker2d are shown in Fig-", "figure_data": ":DONHUGY$QWBUOODE+DOI&KHHWDKY0HWKRGDG,QIR+5/RSWLRQQXPDG,QIR+5/RSWLRQQXPLQIR+5/QR,:RSWLRQQXP$YHUDJHGUHWXUQ$YHUDJHGUHWXUQ7' 332$YHUDJHGUHWXUQ7LPHVWHSV[7LPHVWHSV[(a) Results on Walker2d.(b) Results on Ant.(c) Results on HalfCheetah.+RSSHUY$YHUDJHGUHWXUQ7LPHVWHSV[(d) Results on Hopper."}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "Hyperparameters of adInfoHRL used in the experiment.", "figure_data": "DescriptionSymbol ValueCoefficient for updating the target network\u03c40.005Discount factor\u03b30.99Learning rate for actor0.001Learning rate for critic0.001Batch size for critic100Total batch size for all option policies200 (option num=2), 400 (option num=4)Batch size for the option network50Size of the on-policy buffer5000Number of epochs for training the option network40Number of units in hidden layers(400, 300)Activation functionRelu, Relu, tanhoptimizerAdamnoise clip thresholdc0.5noise for exploration0.1action noise for the critic update0.2variance of the noise for MI regularization0.04coefficient for the MI term\u03bb0.1Table 2: Hyperparameters of TD3 used in the experiment.DescriptionSymbol ValueCoefficient for updating the target network\u03c40.005Discount factor\u03b30.99Learning rate for actor0.001Learning rate for critic0.001Batch size100Number of units in hidden layers(400, 300)Activation functionRelu, Relu, tanhoptimizerAdamnoise clip thresholdc0.5noise for exploration0.1action noise for the critic update0.2"}, {"figure_label": "3", "figure_type": "table", "figure_id": "tab_2", "figure_caption": "Hyperparameters of PPO used in the experiment. We tuned hyperparameters for our tasks, which are defferent from the default parameters in OpenAI baselines(Dhariwal et al., 2017).", "figure_data": "DescriptionSymbol ValueCoefficient for updating the target network \u03c40.001Discount factor\u03b30.99Batch size2048Number of units in hidden layers(64, 64)Clipping parameter0.15Initial learning rate0.0005Learning rate schedulelinear4020020407550250255075100(a) Output of the option network in the state-action space on HalfCheetah-v1."}], "formulas": [], "doi": ""}